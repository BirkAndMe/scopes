/// Add a function to a trigger.
///
/// @param {String} $trigger_name
///   Name of the trigger.
/// @param {String} $function
///   Name of the function to call.
///
/// @return {String}
///   The function name
@function scope-module-on($trigger_name, $module_name) {
  $function: scope- + $module_name + -$trigger_name;

  $triggers: map-get($__scope_triggers, $trigger_name);

  @if ($triggers == null) {
    $triggers: ($function);
  }
  @else {
    $triggers: append($triggers, $function, comma);
  }

  $__scope_triggers: __map-set($__scope_triggers, $trigger_name, $triggers) !global;

  @return $function;
}

/// Trigger all the functions in a trigger.
///
/// @param {String} $trigger_name
///   Name of the trigger.
/// @param {Arguments} $args...
///   Data to pass through to the called functions.
///
/// @return {Boolean}
///   The combined result of the calls
@function scope-module-trigger($trigger_name, $args...) {
  $triggers: map-get($__scope_triggers, $trigger_name);

  @if ($triggers == null) {
    $triggers: ();
  }

  $result: true;

  @each $trigger in $triggers {
    @if (function_exists($trigger)) {
      $result: $result and call($trigger, $args...);
    }
  }

  @return $result;
}

/// Set module data.
@function scope-module-set($module_name, $module: (), $scope_name: $__scope) {
  //
  $scope: __scope-get($scope_name);

  //
  $scope: __map-set($scope, $module_name, $module);

  //
  $nop: __scope-set($scope, $scope_name);

  @return $module;
}

/// Get the module data.
@function scope-module-get($module_name, $scope_name: $__scope) {
  //
  $scope: __scope-get($scope_name);
  //
  $module: map-get($scope, $module_name);

  @if ($module == null) {
    $module: ();
  }

  @return $module;
}

/// Set a single module variable.
@function scope-module-set-variable($module_name, $key, $value, $scope_name: $__scope) {
  $variables: scope-module-get($module_name, $scope_name);
  $variables: __map-set($variables, $key, $value);

  $nop: scope-module-set($module_name, $variables, $scope_name);

  @return $value;
}

/// Get a single module variable.
@function scope-module-get-variable($module_name, $key, $default_value: null, $scope_name: $__scope) {
  $variables: scope-module-get($module_name, $scope_name);

  $value: map-get($variables, $key);

  //
  @if ($value == null and $default_value != null) {

    @if (nth($default_value, 1) == USE_FALLBACK) {
      $fallback_scope: scope-settings-get(fallback, $scope_name);

      @if ($fallback_scope == false) {
        @if (length($default_value) == 2) {
          $value: nth($default_value, 2);
        }
      }
      @else {
        $value: scope-module-get-variable($module_name, $key, $default_value, $fallback_scope);
      }
    }
  }

  @return $value;
}
