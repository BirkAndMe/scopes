///
$__scope_default: default !default;

///
$__scope: $__scope_default !default;


///
$__scopes: ();


/// Get a scope.
///
/// @param {String} $scope_name ($__scope)
///   Name of the scope.
///
/// @return {Map}
///   The complete scope map.
@function __scope-get($scope_name: $__scope, $data: ()) {
  $scope: map-get($__scopes, $scope_name);

  @if ($scope == null) {
    $scope_name: scope-create($scope_name, $data);
    $scope: __scope-get($scope_name);
  }

  @return $scope;
}

/// Set scope data.
///
/// @param {Map} $scope
///   The actual scope data.
/// @param {String} $scope_name ($__scope)
///   Name of the scope.
///
/// @return {Map}
///   The complete scope map.

@function __scope-set($scope, $scope_name: $__scope) {
  $__scopes: __map-set($__scopes, $scope_name, $scope) !global;
  @return $scope;
}


/// Activate a scope.
///
/// @param {String} $scope_name
///   Name of the scope.
@function scope-activate($scope_name) {
  $current_scope: $__scope;

  $nop: scope-module-trigger(SCOPE_ACTIVATE, $current_scope, $scope_name);

  $__scope: $scope_name !global;

  @return $current_scope;
}

/// Get a list of the scope names.
@function scope-get-scopes() {
  @return map-keys($__scopes);
}

/// Create a new scope.
///
/// @param {String|Map} $scope_name ($__scope_default)
///   Name of the scope.
///   Or a map structure. When Using a map this will be used as the $data
///   argument, and the $__scope_default will be used as the scope name.
/// @param {Map} $data (())
///   Scope configurations.
///
/// @example scss - Simple usecase
///   $scope_name: scope-create(myscope);
///
/// @example scss - With a media query
///   $scope_name: scope-create(myscope, (query: 'min'));
@function scope-create($scope_name: $__scope_default, $settings: ()) {
  @if (type-of($scope_name) == map) {
    $settings: $scope_name;
    $scope_name: $__scope_default;
  }

  // Set the scope_name as part of the data
  $settings: __map-set($settings, scope_name, $scope_name);

  // __scope-set() will automatically create the scope if it doesn't exist.
  $nop: __scope-set((settings: $settings), $scope_name);

  // Trigger the SCOPE_CREATE event. Allowing modules to do something everytime
  // a new scope is created.
  $nop: scope-module-trigger(SCOPE_CREATE, $settings);

  @return $scope_name;
}

/// Use a scope.
///
/// If the scope doesn't exist it will automatically be created.
///
/// @param {String} $scope_name ($__scope_default)
///   Name of the scope.
/// @param {Map} $data (())
///   Scope configurations.
///
/// Assuming there's a smaller scope.
/// @example scss - Simple use
///   body {
///     margin: 50px;
///     @include scope(smaller) {
///       margin: 25px;
///     }
///   }
/// @example css - Output
///   body {
///     margin: 50px;
///   }
///   @media (max-width: 1024px) {
///     body {
///       margin: 25px;
///     }
///   }
@mixin scope($scope_name: $__scope_default, $data: ()) {
  $scope: __scope-get($scope_name, $data);

  // Save the current scope so we can reset it later.
  $current_scope: scope-activate($scope_name);

  // If there's no media query, simply print the content.
  $query: scope-settings-get(query);
  @if ($query == false) {
    @content;
  }
  // If there's a media query wrap the content in it.
  @else {
    @media ($query) { @content; }
  }

  // Reset the scope.
  $nop: scope-activate($current_scope);
}

/// Insert the content wrapped inside all scopes, using their respected values
/// and media-queries.
///
/// @param {List} $flags ((())
///   ONLY_QUERY: Only use scopes that has a media-query.
@mixin scope-all($flags: ()) {
  @each $scope in scope-get-scopes() {
    @if (not __has_flag($flags, ONLY_QUERY) or scope-settings-get(query, $scope) != false) {
      @include scope($scope) {
        @content;
      }
    }
  }
}
