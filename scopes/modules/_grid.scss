////
/// @group module/grid
////

/// Current column count.
/// @access private
$__scope_grid_count: null;

/// Current gutter width.
/// @access private
$__scope_grid_gutter: null;

/// Current columnn width.
/// @access private
$__scope_grid_column: null;

/// Current columnn width.
/// @access private
$__scope_grid_width: null;

/// Current columnn width.
/// @access private
$__scope_grid_maxwidth: null;

/// Set the global grid variables on scope activate.
///
/// @name [hook-]SCOPE_ACTIVATE
@function scope-grid-SCOPE_ACTIVATE($current_scope, $new_scope) {
  $nop: scope-grid-set-globals($new_scope);
  @return true;
}
$nop: scope-module-on(SCOPE_ACTIVATE, 'grid');

/// The js module uses this to get the global grid variables.
///
/// @name [hook-]SCOPE_JS_GET
@function scope-grid-SCOPE_JS_GET($scope) {
  // Get the map of grid variables.
  $result: scope-grid-set-globals($scope);

  // Reset the scope to the current scope.
  $nop: scope-grid-set-globals();

  @return $result;
}
$nop: scope-module-on(SCOPE_JS_GET, 'grid');

/// Set the global grid variables.
///
/// This is automatically called when the scope is changed.
///
/// @access private
///
/// @param {String} $scope_name ($__scope)
///   Name of the scope.
///
/// @return {Map}
///   A map with all the new variables.
@function scope-grid-set-globals($scope_name: $__scope) {
  $__scope_grid_count: scope-module-get-variable(grid,
    count,
    USE_FALLBACK, $scope_name) !global;

  $__scope_grid_gutter: scope-module-get-variable(grid,
    gutter,
    USE_FALLBACK, $scope_name) !global;

  $__scope_grid_column: scope-module-get-variable(grid,
    column,
    USE_FALLBACK, $scope_name) !global;

  $__scope_grid_width: scope-module-get-variable(grid,
    width,
    null, $scope_name) !global;

  $__scope_grid_maxwidth: scope-module-get-variable(grid,
    maxwidth,
    null, $scope_name) !global;

  @return (
    count: $__scope_grid_count,
    gutter: $__scope_grid_gutter,
    column: $__scope_grid_column,
    width: $__scope_grid_width,
    maxwidth: $__scope_grid_maxwidth
  );
}

/// Parses an unfinished grid variables array.
///
/// It's not needed to fill out all the variables, but depending on what's
/// filled it will calculate the others.
///
/// If the function isn't given enough variables it will throw an error.
///
/// @access private
///
/// @param {map} $data
///   A map with all or some of the grid variables.
///
///   This can be count, gutter, column, width or maxwidth.
///
/// @return {map}
///   The completed map containing count, gutter, column, width and maxwidth.
@function grid-parse($data) {
  $count: map-get($data, 'count');
  $gutter: map-get($data, 'gutter');
  $column: map-get($data, 'column');
  $width: map-get($data, 'width');
  $maxwidth: map-get($data, 'maxwidth');

  @if ($count == null) {
    @if ($width == null) {
      @error 'Grid settings need a width if there is no count.';
    }

    // Change the gutter to %.
    @if (unit($gutter) != '%') {
      $gutter: percentage($gutter / $width);
    }
    @if (unit($column) != '%') {
      $column: percentage($column / $width);
    }

    $count: (100 + $gutter) / ($column + $gutter);
  }
  @else {
    @if ($gutter == null) {
      @if ($column == null) {
        $column: 100% / $count;
      }

      @if (unit($column) != '%') {
        $column: percentage($column / $width);
      }

      $gutter: (100 - $count * $column) / ($count - 1);
    }

    // Make sure the gutter is in %
    @if (unit($gutter) != '%') {
      @if ($column == null) {
        $column: ($width + $gutter) / $count - $gutter;
      }

      $gutter: percentage($gutter / (($column + $gutter) * $count - $gutter));
    }
  }

  // We are sure to have the gutter now, so calculate the column percentage
  // using the count and gutter percentage.
  $column: (100% - $gutter * ($count - 1)) / $count;

  @return (count: $count, gutter: $gutter, column: $column, width: $width, maxwidth: $maxwidth);
}

/// Setup the grid for the given scope.
///
/// @access private
///
/// @param {map} $data
///   This data is passed along to grid-parse().
/// @param {String} $scope_name ($__scope)
///   Name of the scope.
///
/// @return {map}
///   The parsed data map.
@function grid-setup($data, $scope_name: $__scope) {
  @return scope-module-set(grid, grid-parse($data), $scope_name);
}

/// Setup the grid.
///
/// Wraps the grid-setup function, and makes sure to select the default grid if
/// no grid is selected.
///
/// @param {map} $data
///   This data is passed along to grid-parse().
/// @param {String} $scope_name ($__scope)
///   Name of the scope.
@mixin grid-setup($data, $scope_name: $__scope) {
  $nop: grid-setup($data, $scope_name);
  // Set the globals, if it's the first time calling grid-setup.
  @if ($__scope_grid_count == null) {
    $nop: scope-grid-set-globals($scope_name);
  }
}

/// Get the grid gutter width.
///
/// @param {Integer} $container ($__scope_grid_count)
///   Count of columns in the current container.
/// @param {Integer} $count ($__scope_grid_count)
///   Total grid count.
/// @param {Number} $gutter ($__scope_grid_gutter)
///   Total grid gutter.
///
/// @return {Number}
///   The gutter width.
@function grid-gutter($container: $__scope_grid_count, $count: $__scope_grid_count, $gutter: $__scope_grid_gutter) {
  @return ($count / $container) * $gutter;
}

/// Get the grid column width.
///
/// This is the width of a single column.
///
/// @param {Integer} $container ($__scope_grid_count)
///   Count of columns in the current container.
/// @param {Integer} $count ($__scope_grid_count)
///   Total grid count.
/// @param {Number} $column ($__scope_grid_column)
///   Total grid column width.
/// @param {Number} $gutter
///   Width of a single gutter.
///
/// @return {Number}
///   Width of a single column.
@function grid-column(
  $container: $__scope_grid_count,
  $count: $__scope_grid_count,
  $column: $__scope_grid_column,
  $gutter: $__scope_grid_gutter
) {
  // @TODO: Is this leftovers from the fixed layout?
  @if (unit($column) == '%') {
    @return (100% - $gutter * ($container - 1)) / $container;
  }

  @return ($count / $container) * $column;
}

/// Get the width of X columns.
///
/// @param {Integer} $columns
///   Number of columns to get the width of.
/// @param {Integer} $container ($__scope_grid_count)
///   Count of columns in the current container.
/// @param {Integer} $count ($__scope_grid_count)
///   Total grid count.
/// @param {Number} $gutter ($__scope_grid_gutter)
///   Total grid gutter.
/// @param {Number} $column ($__scope_grid_column)
///   Total grid column.
///
/// @return {Number}
///   The total width of all the columns, without the last gutter width.
@function grid-width($columns, $container: $__scope_grid_count, $count: $__scope_grid_count, $gutter: $__scope_grid_gutter, $column: $__scope_grid_column) {
  $gutter: grid-gutter($container, $count, $gutter);
  $column: grid-column($container, $count, $column, $gutter);

  @return $column * $columns + $gutter * ($columns - 1);
}

/// Get the grid start position of X columns.
///
/// The "grid value" is the start position of a column, or in other words it's
/// a wrapper for: grid-width(X) + grid-gutter(1).
///
/// @param {Integer} $columns
///   Number of columns to get the width of.
/// @param {Integer} $container ($__scope_grid_count)
///   Count of columns in the current container.
/// @param {Integer} $count ($__scope_grid_count)
///   Total grid count.
/// @param {Number} $gutter ($__scope_grid_gutter)
///   Total grid gutter.
/// @param {Number} $column ($__scope_grid_column)
///   Total grid column.
///
/// @return {Number}
///   The total width of the columns including gutter on the last column.
@function grid-value($columns, $container: $__scope_grid_count, $count: $__scope_grid_count, $gutter: $__scope_grid_gutter, $column: $__scope_grid_column) {
  $gutter: grid-gutter($container, $count, $gutter);
  $column: grid-column($container, $count, $column, $gutter);

  @return $column * $columns + $gutter * $columns;
}

/// Wrap elements at element X.
///
/// This is useful when making lists.
///
/// @example scss - List of 3 elements per row in a 12 column layout.
///   .element {
///     // Sets the width of the element to 4 columns.
///     @include grid(4);
///     // Sets it so after every third element the float is cleared.
///     @include grid-wrap(3);
///   }
///
/// @param {Integer} $delta
///   At what number of element to wrap.
@mixin grid-wrap($delta) {
  &:nth-child(#{$delta}n) { margin-right: 0; }
  &:nth-child(#{$delta}n+1) { clear: left; }
}

/// A way to reset the wrapper created by grid-wrap.
///
/// When working with breakpoints, that change the number of elements per row,
/// you need reset the wrapper created by grid-wrap (and most likely create a
/// new "wrap" after the reset).
///
/// @example.scss - List of 3 elements that becomes 2 in a smaller breakpoint (using 12 columnns in both breakpoints).
///   .element {
///     // Sets the width of the element to 4 columns.
///     @include grid(4);
///     // Sets it so after every third element the float is cleared.
///     @include grid-wrap(3);
///
///     @include scope(smaller) {
///       // Clear the current wrapper at the third element.
///       @include grid-reset-wrap(3);
///       // Set the new wrapper at every other element.
///       @include grid-wrap(2);
///       // Also change the width so it fills the grid.
///       @include grid(6);
///     }
///   }
///
/// @param {Integer} $delta
///   At what number of element to wrap.
/// @param {Integer} $container
///   The column count of the container, the element is inside.
///
///   This is needed to reset the right margin again.
@mixin grid-reset-wrap($delta, $container: $__scope_grid_count) {
  &:nth-child(#{$delta}n) { margin-right: grid-gutter($container); }
	&:nth-child(#{$delta}n+1) { clear: none }
}

///
@mixin grid-reset-list($info: $columns of $container, $scope_container: $__scope_grid_count) {
  $columns: nth($info, 1);
  $container: _scope-grid-parse-info($info);

  @include grid-reset-wrap($container / $columns, $scope_container);
}

///
@function _scope-grid-parse-info($info) {
  $container: $__scope_grid_count;
  @if (length($info) > 1) {
    $container: nth($info, 3);
  }
  @return $container;
}

///
@mixin grid-table() {
  table-layout: fixed;
  th, td {
    box-sizing: border-box;
  }
}

///
@mixin grid($info: $columns of $container, $flags: ()) {
  $columns: nth($info, 1);
  $container: _scope-grid-parse-info($info);

  @if (not __has_flag($flags, IS_TABLE)) {
    width: grid-width($columns, $container);
  } @else {
    @if (not __has_flag($flags, LAST_COLUMN)) {
      width: grid-width($columns, $container) + grid-gutter($container);
    } @else {
      width: grid-width($columns, $container);
    }

    @if (__has_flag($flags, INSIDE_PADDING)) {
      padding-right: grid-gutter($container);
    }

    $flags: append($flags, NO_MARGIN);
    $flags: append($flags, NO_FLOAT);
  }

  @if (not __has_flag($flags, NO_MARGIN)) {
    margin-right: grid-gutter($container);
  }

  @if (not __has_flag($flags, NO_FLOAT)) {
    float: left;
  }

  @if (__has_flag($flags, LIST)) {
    @include grid-wrap($container / $columns);
  }

  @if (__has_flag($flags, ALL_SCOPES)) {
    $buffer: ();
    @each $flag in $flags {
      @if ($flag != ALL_SCOPES and $flag != LIST) {
        $buffer: append($buffer, $flag);
      }
    }

    @include scope-all(ONLY_QUERY, grid) {
      @include grid($columns of $container, $buffer);
    }
  }
}

///
@mixin grid-container($flags: ()) {
  @if ($__scope_grid_width != null) {
    width: $__scope_grid_width;
  }
  @if ($__scope_grid_maxwidth != null) {
    max-width: $__scope_grid_maxwidth;
  }

  @if (__has_flag($flags, ALL_SCOPES)) {
    @include scope-all(ONLY_QUERY) {
      @include grid-container();
    }
  }
}
