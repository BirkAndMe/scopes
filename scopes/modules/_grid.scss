/// Ccurrent column count.
$__scope_grid_count: null;

/// Current gutter width.
$__scope_grid_gutter: null;

/// Current columnn width.
$__scope_grid_column: null;

/// Current columnn width.
$__scope_grid_width: null;

/// Current columnn width.
$__scope_grid_maxwidth: null;

/// Set the global grid variables on scope activate.
@function scope-grid-SCOPE_ACTIVATE($current_scope, $new_scope) {
  $nop: scope-grid-set-globals($new_scope);
  @return true;
}
$nop: scope-module-on(SCOPE_ACTIVATE, 'grid');

///
@function scope-grid-SCOPE_JS_GET($scope) {
  // $grids: ();
  // @each $scope in scope-get-scopes() {
  //   $grids: __map-set($grids, $scope, scope-grid-set-globals($scope));
  // }
  $result: scope-grid-set-globals($scope);
  $nop: scope-grid-set-globals();
  @return $result;
}
$nop: scope-module-on(SCOPE_JS_GET, 'grid');

/// Set the global grid variables.
///
/// @param {String} $scope_name ($__scope)
///   Name of the scope.
///
/// @return {Map}
///   A map with all the new variables.
@function scope-grid-set-globals($scope_name: $__scope) {
  $__scope_grid_count: scope-module-get-variable(grid,
    count,
    USE_FALLBACK, $scope_name) !global;

  $__scope_grid_gutter: scope-module-get-variable(grid,
    gutter,
    USE_FALLBACK, $scope_name) !global;

  $__scope_grid_column: scope-module-get-variable(grid,
    column,
    USE_FALLBACK, $scope_name) !global;

  $__scope_grid_width: scope-module-get-variable(grid,
    width,
    null, $scope_name) !global;

  $__scope_grid_maxwidth: scope-module-get-variable(grid,
    maxwidth,
    null, $scope_name) !global;

  @return (count: $__scope_grid_count, gutter: $__scope_grid_gutter, column: $__scope_grid_column, width: $__scope_grid_width, maxwidth: $__scope_grid_maxwidth);
}

/// Get the grid gutter width.
///
/// @param {Integer} $container ($__scope_grid_count)
///   Count of columns in the current container.
/// @param {Integer} $count ($__scope_grid_count)
///   Total grid count.
/// @param {Number} $gutter ($__scope_grid_gutter)
///   Total grid gutter.
@function grid-gutter($container: $__scope_grid_count, $count: $__scope_grid_count, $gutter: $__scope_grid_gutter) {
  @return ($count / $container) * $gutter;
}

/// Get the grid column width.
///
/// @param {Integer} $container ($__scope_grid_count)
///   Count of columns in the current container.
/// @param {Integer} $count ($__scope_grid_count)
///   Total grid count.
/// @param {Number} $column ($__scope_grid_column)
///   Total grid column.
@function grid-column($container: $__scope_grid_count, $count: $__scope_grid_count, $column: $__scope_grid_column) {
  @return ($count / $container) * $column;
}

/// Get the width of X columns.
///
/// @param {Integer} $columns
///   Number of columns to get the width of.
/// @param {Integer} $container ($__scope_grid_count)
///   Count of columns in the current container.
/// @param {Integer} $count ($__scope_grid_count)
///   Total grid count.
/// @param {Number} $gutter ($__scope_grid_gutter)
///   Total grid gutter.
/// @param {Number} $column ($__scope_grid_column)
///   Total grid column.
@function grid-width($columns, $container: $__scope_grid_count, $count: $__scope_grid_count, $gutter: $__scope_grid_gutter, $column: $__scope_grid_column) {
  $gutter: grid-gutter($container, $count, $gutter);
  $column: grid-column($container, $count, $column);

  @return $column * $columns + $gutter * ($columns - 1);
}

/// Get the "grid value" of X columns.
///
/// The "grid value" is the start position of a column, or in other words
/// grid-width(X) + grid-gutter(1).
///
/// @param {Integer} $columns
///   Number of columns to get the width of.
/// @param {Integer} $container ($__scope_grid_count)
///   Count of columns in the current container.
/// @param {Integer} $count ($__scope_grid_count)
///   Total grid count.
/// @param {Number} $gutter ($__scope_grid_gutter)
///   Total grid gutter.
/// @param {Number} $column ($__scope_grid_column)
///   Total grid column.
@function grid-value($columns, $container: $__scope_grid_count, $count: $__scope_grid_count, $gutter: $__scope_grid_gutter, $column: $__scope_grid_column) {
  $gutter: grid-gutter($container, $count, $gutter);
  $column: grid-column($container, $count, $column);

  @return $column * $columns + $gutter * $columns;
}

///
@function grid-parse($data, $layout: FLUID) {
  // TODO: Clean up this function. It works but it seems like a lot of mess.
  //       There must be a more clever way of parsing the data.

  $count: map-get($data, 'count');
  $gutter: map-get($data, 'gutter');
  $column: map-get($data, 'column');
  $width: map-get($data, 'width');
  $maxwidth: map-get($data, 'maxwidth');

  @if ($layout == FIXED) {
    @if (length($data) < 3) {
      @debug "Need at least 3 parameters when usig fixed units.";
      @return false;
    }

    @if ($width == null) {
      $width: ($column + $gutter) * $count - $gutter;
    }
    @else if ($count == null) {
      $count: ($width + $gutter) / ($column + $gutter);
    }
  }

  @if ($count == null) {
    @if (unit($gutter) != '%') {
      $gutter: percentage($gutter / $width);
    }
    @if (unit($column) != '%') {
      $column: percentage($column / $width);
    }

    $count: (100 + $gutter) / ($column + $gutter);
  }
  @else {
    @if ($gutter == null) {
      @if ($column == null) {
        $column: 100% / $count;
      }

      @if (unit($column) != '%') {
        $column: percentage($column / $width);
      }

      $gutter: (100 - $count * $column) / ($count - 1);
    }

    // Make sure the gutter is in %
    @if (unit($gutter) != '%') {
      @if ($column == null) {
        $column: ($width + $gutter) / $count - $gutter;
      }

      $gutter: percentage($gutter / (($column + $gutter) * $count - $gutter));
    }
  }

  // We are sure to have the gutter now, so calculate the column percentage
  // using the count and gutter percentage.
  $column: (100% - $gutter * ($count - 1)) / $count;

  // Transform the gutter and columnn to fixed values if we use this layout.
  @if ($layout == FIXED) {
    $gutter: $width * ($gutter / 100%);
    $column: $width * ($column / 100%);
  }

  @if ($width == AUTO) {
    $width: grid-width($count, $count, $count, $gutter, $column);
  }

  @return (count: $count, gutter: $gutter, column: $column, width: $width, maxwidth: $maxwidth);
}

///
@function grid-setup($data, $layout: FLUID, $scope_name: $__scope) {
  @return scope-module-set(grid, grid-parse($data, $layout), $scope_name);
}

///
@mixin grid-setup($data, $layout: FLUID, $scope_name: $__scope) {
  $nop: grid-setup($data, $layout, $scope_name);

  // Set the globals, if it's the first time calling grid-setup.
  @if ($__scope_grid_count == null) {
    $nop: scope-grid-set-globals($scope_name);
  }
}

///
@mixin grid-wrap($delta) {
  &:nth-child(#{$delta}n) { margin-right: 0; }
  &:nth-child(#{$delta}n+1) { clear: left; }
}

///
@mixin grid-reset-wrap($delta, $container) {
  &:nth-child(#{$delta}n) { margin-right: grid-gutter($container); }
	&:nth-child(#{$delta}n+1) { clear: none }
}

///
@mixin grid-reset-list($info: $columns of $container, $scope_container: $__scope_grid_count) {
  $columns: nth($info, 1);
  $container: _scope-grid-parse-info($info);

  @include grid-reset-wrap($container / $columns, $scope_container);

}

///
@function _scope-grid-parse-info($info) {
  $container: $__scope_grid_count;
  @if (length($info) > 1) {
    $container: nth($info, 3);
  }
  @return $container;
}

///
@mixin grid($info: $columns of $container, $flags: ()) {
  $columns: nth($info, 1);
  $container: _scope-grid-parse-info($info);

  width: grid-width($columns, $container);

  @if (not __has_flag($flags, NO_MARGIN)) {
    margin-right: grid-gutter($container);
  }

  @if (not __has_flag($flags, NO_FLOAT)) {
    float: left;
  }

  @if (__has_flag($flags, LIST)) {
    @include grid-wrap($container / $columns);
  }

  @if (__has_flag($flags, ALL_SCOPES)) {
    $buffer: ();
    @each $flag in $flags {
      @if ($flag != ALL_SCOPES and $flag != LIST) {
        $buffer: append($buffer, $flag);
      }
    }

    // @debug $buffer;
    @include scope-all(ONLY_QUERY, grid) {
      @include grid($columns of $container, $buffer);
    }
  }
}

///
@mixin grid-container($flags: ()) {
  @if ($__scope_grid_width != null) {
    width: $__scope_grid_width;
  }
  @if ($__scope_grid_maxwidth != null) {
    max-width: $__scope_grid_maxwidth;
  }

  @if (__has_flag($flags, ALL_SCOPES)) {
    @include scope-all(ONLY_QUERY) {
      @include grid-container();
    }
  }
}
